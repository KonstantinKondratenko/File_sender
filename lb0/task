Лабораторные работы 
Для успешного освоения курса необходимо выполнить лабораторные работ, каждая из которых охватывает конкретную тему курса. Контроль проводится в форме индивидуальных защит лабораторных работ с учетом следующих критериев:
- полнота анализа студентом исходной формулировки и корректность формализации постановки задачи;
- правильность основной идеи решения задачи и обоснованность проектных решений при ее реализации;
- адекватность используемых средств и конструкций языка программирования;
- степень владения инструментальными средствами (средой разработки и т.п.), продемонстрированная при выполнении задания;
- полнота тестирования и адекватность интерпретации результатов;
- выполнение требований по представлению и документированию результатов выполнения индивидуального задания;
- полнота, ясность и доказательность доводов и аргументов, предъявляемых студентом при защите индивидуального задания.
Учащийся может предложить свой вариант задания, предварительно согласовав его условия с преподавателем (например, по e-mail). Данная инициатива будет учтена при сдаче дифференцированного зачета. 

Л.Р. 0 Запуск параллельной программы на различном числе одновременно работающих процессов, упорядочение вывода результатов.
Задание: Запустить программу на 1,2 … N процессах несколько раз. Проанализировать порядок вывода сообщений на экран. Вывести правило, определяющее порядок вывода сообщений. Модифицировать программу таким образом, чтобы порядок вывода сообщений на экран соответствовал номеру соответствующего процесса.
1. Написать параллельную программу MPI
Где каждый процесс определяет свой ранг MPI_Comm_rank (MPI_COMM_WORLD, &ProcRank);, после чего действия в программе разделяются. Все процессы, кроме процесса с рангом 0 else, передают значение своего ранга нулевому процессу MPI_Send (&ProcRank, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);. Процесс с рангом 0 if ( ProcRank == 0 ){...} сначала печатает значение своего ранга printf ("\n Hello from process %3d", ProcRank);, а далее последовательно принимает сообщения с рангами процессов MPI_Recv(&RecvRank, 1, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &Status); и также печатает их значения printf("\n Hello from process %3d", RecvRank); . При этом важно отметить, что порядок приема сообщений заранее не определен и зависит от условий выполнения параллельной программы (более того, этот порядок может изменяться от запуска к запуску). 
2. Запустить программу на 1,2 … N процессах несколько раз.
3. Проанализировать порядок вывода сообщений на экран. Вывести правило, определяющее порядок вывода сообщений.
4. Модифицировать программу таким образом, чтобы порядок вывода сообщений на экран соответствовал номеру соответствующего процесса.

